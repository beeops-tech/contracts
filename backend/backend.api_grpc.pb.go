// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc1
// source: backend.api.proto

package backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BackendApi_Register_FullMethodName                  = "/backend.BackendApi/Register"
	BackendApi_PushUrlCallback_FullMethodName           = "/backend.BackendApi/PushUrlCallback"
	BackendApi_PushWaitingScreenCallback_FullMethodName = "/backend.BackendApi/PushWaitingScreenCallback"
)

// BackendApiClient is the client API for BackendApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendApiClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	PushUrlCallback(ctx context.Context, in *CallbackPushRequest, opts ...grpc.CallOption) (*CallbackPushResponse, error)
	PushWaitingScreenCallback(ctx context.Context, in *CallbackPushRequest, opts ...grpc.CallOption) (*CallbackPushResponse, error)
}

type backendApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendApiClient(cc grpc.ClientConnInterface) BackendApiClient {
	return &backendApiClient{cc}
}

func (c *backendApiClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, BackendApi_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendApiClient) PushUrlCallback(ctx context.Context, in *CallbackPushRequest, opts ...grpc.CallOption) (*CallbackPushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallbackPushResponse)
	err := c.cc.Invoke(ctx, BackendApi_PushUrlCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendApiClient) PushWaitingScreenCallback(ctx context.Context, in *CallbackPushRequest, opts ...grpc.CallOption) (*CallbackPushResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallbackPushResponse)
	err := c.cc.Invoke(ctx, BackendApi_PushWaitingScreenCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendApiServer is the server API for BackendApi service.
// All implementations must embed UnimplementedBackendApiServer
// for forward compatibility.
type BackendApiServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	PushUrlCallback(context.Context, *CallbackPushRequest) (*CallbackPushResponse, error)
	PushWaitingScreenCallback(context.Context, *CallbackPushRequest) (*CallbackPushResponse, error)
	mustEmbedUnimplementedBackendApiServer()
}

// UnimplementedBackendApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBackendApiServer struct{}

func (UnimplementedBackendApiServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBackendApiServer) PushUrlCallback(context.Context, *CallbackPushRequest) (*CallbackPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUrlCallback not implemented")
}
func (UnimplementedBackendApiServer) PushWaitingScreenCallback(context.Context, *CallbackPushRequest) (*CallbackPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushWaitingScreenCallback not implemented")
}
func (UnimplementedBackendApiServer) mustEmbedUnimplementedBackendApiServer() {}
func (UnimplementedBackendApiServer) testEmbeddedByValue()                    {}

// UnsafeBackendApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendApiServer will
// result in compilation errors.
type UnsafeBackendApiServer interface {
	mustEmbedUnimplementedBackendApiServer()
}

func RegisterBackendApiServer(s grpc.ServiceRegistrar, srv BackendApiServer) {
	// If the following call pancis, it indicates UnimplementedBackendApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BackendApi_ServiceDesc, srv)
}

func _BackendApi_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendApi_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendApiServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendApi_PushUrlCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendApiServer).PushUrlCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendApi_PushUrlCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendApiServer).PushUrlCallback(ctx, req.(*CallbackPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendApi_PushWaitingScreenCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendApiServer).PushWaitingScreenCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendApi_PushWaitingScreenCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendApiServer).PushWaitingScreenCallback(ctx, req.(*CallbackPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendApi_ServiceDesc is the grpc.ServiceDesc for BackendApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.BackendApi",
	HandlerType: (*BackendApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _BackendApi_Register_Handler,
		},
		{
			MethodName: "PushUrlCallback",
			Handler:    _BackendApi_PushUrlCallback_Handler,
		},
		{
			MethodName: "PushWaitingScreenCallback",
			Handler:    _BackendApi_PushWaitingScreenCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend.api.proto",
}
