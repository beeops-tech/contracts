// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc1
// source: bee.api.proto

package bee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeeApi_PushUrl_FullMethodName           = "/bee.BeeApi/PushUrl"
	BeeApi_HealthCheck_FullMethodName       = "/bee.BeeApi/HealthCheck"
	BeeApi_PushWaitingScreen_FullMethodName = "/bee.BeeApi/PushWaitingScreen"
)

// BeeApiClient is the client API for BeeApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeeApiClient interface {
	PushUrl(ctx context.Context, in *PushUrlRequest, opts ...grpc.CallOption) (*PushUrlResponse, error)
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	PushWaitingScreen(ctx context.Context, in *PushWaitingScreenRequest, opts ...grpc.CallOption) (*PushWaitingScreenResponse, error)
}

type beeApiClient struct {
	cc grpc.ClientConnInterface
}

func NewBeeApiClient(cc grpc.ClientConnInterface) BeeApiClient {
	return &beeApiClient{cc}
}

func (c *beeApiClient) PushUrl(ctx context.Context, in *PushUrlRequest, opts ...grpc.CallOption) (*PushUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushUrlResponse)
	err := c.cc.Invoke(ctx, BeeApi_PushUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeApiClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, BeeApi_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beeApiClient) PushWaitingScreen(ctx context.Context, in *PushWaitingScreenRequest, opts ...grpc.CallOption) (*PushWaitingScreenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushWaitingScreenResponse)
	err := c.cc.Invoke(ctx, BeeApi_PushWaitingScreen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeeApiServer is the server API for BeeApi service.
// All implementations must embed UnimplementedBeeApiServer
// for forward compatibility.
type BeeApiServer interface {
	PushUrl(context.Context, *PushUrlRequest) (*PushUrlResponse, error)
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	PushWaitingScreen(context.Context, *PushWaitingScreenRequest) (*PushWaitingScreenResponse, error)
	mustEmbedUnimplementedBeeApiServer()
}

// UnimplementedBeeApiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeeApiServer struct{}

func (UnimplementedBeeApiServer) PushUrl(context.Context, *PushUrlRequest) (*PushUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUrl not implemented")
}
func (UnimplementedBeeApiServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBeeApiServer) PushWaitingScreen(context.Context, *PushWaitingScreenRequest) (*PushWaitingScreenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushWaitingScreen not implemented")
}
func (UnimplementedBeeApiServer) mustEmbedUnimplementedBeeApiServer() {}
func (UnimplementedBeeApiServer) testEmbeddedByValue()                {}

// UnsafeBeeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeeApiServer will
// result in compilation errors.
type UnsafeBeeApiServer interface {
	mustEmbedUnimplementedBeeApiServer()
}

func RegisterBeeApiServer(s grpc.ServiceRegistrar, srv BeeApiServer) {
	// If the following call pancis, it indicates UnimplementedBeeApiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeeApi_ServiceDesc, srv)
}

func _BeeApi_PushUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeApiServer).PushUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeApi_PushUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeApiServer).PushUrl(ctx, req.(*PushUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeApi_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeApiServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeApi_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeApiServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeeApi_PushWaitingScreen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushWaitingScreenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeeApiServer).PushWaitingScreen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeeApi_PushWaitingScreen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeeApiServer).PushWaitingScreen(ctx, req.(*PushWaitingScreenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeeApi_ServiceDesc is the grpc.ServiceDesc for BeeApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeeApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bee.BeeApi",
	HandlerType: (*BeeApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushUrl",
			Handler:    _BeeApi_PushUrl_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _BeeApi_HealthCheck_Handler,
		},
		{
			MethodName: "PushWaitingScreen",
			Handler:    _BeeApi_PushWaitingScreen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bee.api.proto",
}
